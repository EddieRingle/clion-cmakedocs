import org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository

buildscript {
  ext.ver = [
      kotlin: "1.2.51",
  ]
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${ver.kotlin}"
  }
  repositories {
    jcenter()
  }
}

plugins {
  id "org.jetbrains.intellij" version "0.3.5"
}

apply plugin: "idea"
apply plugin: "kotlin"

repositories {
  jcenter()
}

group "io.ringle.ij"
version "1.0.1"

def clionPath = getCLionPath()

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:${ver.kotlin}"
  implementation "org.jetbrains.plugins:org.asciidoctor.intellij.asciidoc:0.24.3"
}

intellij {
  pluginName "clion-cmakedocs"
  plugins = ["org.asciidoctor.intellij.asciidoc:0.24.3"]
  localPath clionPath
  alternativeIdePath clionPath
  ideaDependencyCachePath = file("deps").absolutePath
  intellij.updateSinceUntilBuild false
  afterEvaluate {
    project.repositories.forEach { repo ->
      if (repo instanceof DefaultIvyArtifactRepository) {
        if (repo.name.equals("ivy2")) {
          repo.artifactPattern(
              "${gradle.gradleUserHomeDir}/caches/modules-2/files-2.1/com.jetbrains.intellij.idea/plugins.jetbrains.com/[module]-[revision]/[artifact](.[ext])")
        }
      }
    }
  }
}

task(verifySetup) {
  doLast {
    def clionJar = "${clionPath}/lib/clion.jar"
    if (!file(clionJar).exists()) {
      throw new GradleException("${clionJar} not found, set clion.dir to valid CLion installation")
    }
  }
}

compileKotlin.dependsOn verifySetup

def getCLionPath() {
  Properties props = new Properties()
  props.load(project.rootProject.file("local.properties").newDataInputStream())
  def clionPath = props.getProperty("clion.dir", null)
  if (clionPath == null) {
    throw new GradleException("CLion path not found. Define clion.dir in local.properties file.")
  }
  return clionPath
}
